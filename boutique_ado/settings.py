"""
Django settings for boutique_ado project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import dj_database_url
from os import path

if path.exists("env.py"):
      import env 

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ofsni2=l@sz$gsv35(2(b2*sr#x&=3r^9eenx-b07)1=hw15_7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '4e93500489df.ngrok.io',
    '127.0.0.1'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     'django.contrib.sites', #used by social media account app to create correct callback urls when logging in via some
    'allauth',
    'allauth.account', #enable basic user function - login/out ,user registration and password reset
    'allauth.socialaccount', #logging in via social media providers e.g facebook and google
    'home', #added home app to installed apps
    'products',#added products app to installed apps
    'bag', #added bag(shopping bag) app to installed apps
    'checkout', #added checkout app to installed apps
    'crispy_forms', #installed django-crispy-forms to style forms with bootstrap
    'django_countries', #django_countries to use for countrylist 
    'profiles', #profiles app to create a user profile possibility
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
ROOT_URLCONF = 'boutique_ado.urls'

CRISPY_TEMPLATE_PACK = 'bootstrap4' #tell which template pack crispy forms will use

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'), #add route templates directory 
            os.path.join(BASE_DIR, 'templates', 'allauth') #add customer allauth directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', #required by allauth,
                # do not remove #allows django and allauth to access our http request object in our templates
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'bag.contexts.bag_contents' #makes def bag_content from contexts-py avaialable across apps
            ],
            'builtins':[ #use builtins to add a list of builtins we want available in all our templates by default
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field'
            ]
        },
    },
]

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1 #required together with 'django.contrib.sites'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' #Since by default allauth will send confirmation emails to any new accounts.
#We need to temporarily log those emails to the console so we can get the confirmation links.

ACCOUNT_AUTHENTICATION_METHOD = 'username_email' 
ACCOUNT_EMAIL_REQUIRED = True #email required to register
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' #mandatory to verify your email address
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True #need to input email twice to make sure no typos 
ACCOUNT_USERNAME_MIN_LENGTH = 4 #minimum username length
LOGIN_URL = '/accounts/login' #specified login url
LOGIN_REDIRECT_URL = '/' #redirect url after logging in 

WSGI_APPLICATION = 'boutique_ado.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

#DATABASES = {
 #   'default': {
  #      'ENGINE': 'django.db.backends.sqlite3',
   #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #}
#}

DATABASES = {
    'default': dj_database_url.parse('postgres://lgheikctyffqkh:469065619d86c005016e65eec394886a5c9c092c7c9c3bfe1c2a6d8ef74d2d0f@ec2-54-75-229-28.eu-west-1.compute.amazonaws.com:5432/d22jitpanak60u')
}
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


FREE_DELIVERY_THRESHOLD = 50 # which will be used to calculate delivery costs 
STANDARD_DELIVERY_PERCENTAGE = 10 # which will be used to calculate delivery costs 

# Stripe

STRIPE_CURRENCY = 'usd'
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY', '') #KEEP SAFE IN ENV.PY FILE
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '') #KEEP SAFE IN ENV.PY FILE
STRIPE_WH_SECRET = os.getenv('STRIPE_WH_SECRET', '')#KEEP SAFE IN ENV.PY FILE
DEFAULT_FROM_EMAIL = 'boutiqueado@example.com'
##
####